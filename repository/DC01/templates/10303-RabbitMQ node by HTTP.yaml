zabbix_export:
  version: '6.0'
  date: '2024-08-25T12:38:09Z'
  groups:
    - uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
      name: Templates/Applications
  templates:
    - uuid: b9514029d03b44de9adf24251778dbf3
      template: 'RabbitMQ node by HTTP'
      name: 'RabbitMQ node by HTTP'
      description: |
        Get node metrics from RabbitMQ management plugin provided an HTTP-based API using HTTP agent.
        
        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/387226-discussion-thread-for-official-zabbix-template-rabbitmq
        
        Generated by official Zabbix template tool "Templator"
      groups:
        - name: Templates/Applications
      items:
        - uuid: 542f36f0b4e24d99a402a98b6f6fe4c4
          name: 'RabbitMQ: Service response time'
          type: SIMPLE
          key: 'net.tcp.service.perf["{$RABBITMQ.API.SCHEME}","{HOST.CONN}","{$RABBITMQ.API.PORT}"]'
          history: 7d
          value_type: FLOAT
          units: s
          tags:
            - tag: component
              value: system
          triggers:
            - uuid: 220eedd4f69b43fabe233b5127e09c50
              expression: 'min(/RabbitMQ node by HTTP/net.tcp.service.perf["{$RABBITMQ.API.SCHEME}","{HOST.CONN}","{$RABBITMQ.API.PORT}"],5m)>{$RABBITMQ.RESPONSE_TIME.MAX.WARN}'
              name: 'RabbitMQ: Service response time is too high'
              event_name: 'RabbitMQ: Service response time is too high (over {$RABBITMQ.RESPONSE_TIME.MAX.WARN}s for 5m)'
              priority: WARNING
              manual_close: 'YES'
              dependencies:
                - name: 'RabbitMQ: Service is down'
                  expression: 'last(/RabbitMQ node by HTTP/net.tcp.service["{$RABBITMQ.API.SCHEME}","{HOST.CONN}","{$RABBITMQ.API.PORT}"])=0'
              tags:
                - tag: scope
                  value: performance
        - uuid: f53379f858f74714b15ee12fe6fc2d08
          name: 'RabbitMQ: Service ping'
          type: SIMPLE
          key: 'net.tcp.service["{$RABBITMQ.API.SCHEME}","{HOST.CONN}","{$RABBITMQ.API.PORT}"]'
          history: 7d
          valuemap:
            name: 'Service state'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 10m
          tags:
            - tag: component
              value: health
            - tag: component
              value: network
          triggers:
            - uuid: 636356e5255d49d992df4b7a0c7d222d
              expression: 'last(/RabbitMQ node by HTTP/net.tcp.service["{$RABBITMQ.API.SCHEME}","{HOST.CONN}","{$RABBITMQ.API.PORT}"])=0'
              name: 'RabbitMQ: Service is down'
              priority: AVERAGE
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: availability
        - uuid: 14468c29d16440cfb40429f58a0399f4
          name: 'RabbitMQ: Get nodes'
          type: HTTP_AGENT
          key: rabbitmq.get_nodes
          history: 1h
          trends: '0'
          value_type: TEXT
          authtype: BASIC
          username: '{$RABBITMQ.API.USER}'
          password: '{$RABBITMQ.API.PASSWORD}'
          description: 'The HTTP API endpoint that returns metrics of the nodes.'
          url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true'
          tags:
            - tag: component
              value: raw
          triggers:
            - uuid: d4452f05d08343c7a374da412c0f1de6
              expression: 'nodata(/RabbitMQ node by HTTP/rabbitmq.get_nodes,30m)=1'
              name: 'RabbitMQ: Failed to fetch nodes data'
              event_name: 'RabbitMQ: Failed to fetch nodes data (or no data for 30m)'
              priority: WARNING
              description: 'Zabbix has not received any data for items for the last 30 minutes.'
              manual_close: 'YES'
              dependencies:
                - name: 'RabbitMQ: Service is down'
                  expression: 'last(/RabbitMQ node by HTTP/net.tcp.service["{$RABBITMQ.API.SCHEME}","{HOST.CONN}","{$RABBITMQ.API.PORT}"])=0'
              tags:
                - tag: scope
                  value: availability
        - uuid: ff7ec5f6e2354c90bffdbd25f9360555
          name: 'RabbitMQ: Get node overview'
          type: HTTP_AGENT
          key: rabbitmq.get_node_overview
          history: 1h
          trends: '0'
          value_type: TEXT
          authtype: BASIC
          username: '{$RABBITMQ.API.USER}'
          password: '{$RABBITMQ.API.PASSWORD}'
          description: 'The HTTP API endpoint that returns cluster-wide metrics.'
          preprocessing:
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/overview'
          tags:
            - tag: component
              value: raw
        - uuid: 3d0770d550b24f5ca80289cb723c8386
          name: 'RabbitMQ: Get queues'
          type: HTTP_AGENT
          key: rabbitmq.get_queues
          history: 1h
          trends: '0'
          value_type: TEXT
          authtype: BASIC
          username: '{$RABBITMQ.API.USER}'
          password: '{$RABBITMQ.API.PASSWORD}'
          description: 'The HTTP API endpoint that returns metrics of the queues metrics.'
          url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/queues'
          tags:
            - tag: component
              value: raw
        - uuid: 8cb8f380645f4d7f8250b110acd47d1c
          name: 'RabbitMQ: Free disk space'
          type: DEPENDENT
          key: rabbitmq.node.disk_free
          delay: '0'
          history: 7d
          units: B
          description: 'The current free disk space.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.disk_free
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: storage
        - uuid: 38099990b854421ca39f178b9c9be016
          name: 'RabbitMQ: Disk free alarm'
          type: DEPENDENT
          key: rabbitmq.node.disk_free_alarm
          delay: '0'
          history: 7d
          description: 'It checks whether the node has a disk alarm or not.'
          valuemap:
            name: 'Alarm state'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.disk_free_alarm
            - type: BOOL_TO_DECIMAL
              parameters:
                - ''
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: storage
          triggers:
            - uuid: 093eec2fd9264f158087509d8364dc09
              expression: 'last(/RabbitMQ node by HTTP/rabbitmq.node.disk_free_alarm)=1'
              name: 'RabbitMQ: Free disk space alarm'
              event_name: 'RabbitMQ: Free disk space alarm (Free space threshold has been reached)'
              opdata: 'Current state: {ITEM.LASTVALUE1}'
              priority: AVERAGE
              description: 'For more details see [Free Disk Space Alarms](https://www.rabbitmq.com/disk-alarms.html).'
              tags:
                - tag: scope
                  value: performance
        - uuid: ce9f4b99c77545fb8acd596d72725898
          name: 'RabbitMQ: Disk free limit'
          type: DEPENDENT
          key: rabbitmq.node.disk_free_limit
          delay: '0'
          history: 7d
          units: B
          description: 'The free space limit of a disk expressed in bytes.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.disk_free_limit
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: storage
        - uuid: fae24c176bd34b81b0f578883c5c2760
          name: 'RabbitMQ: Used file descriptors'
          type: DEPENDENT
          key: rabbitmq.node.fd_used
          delay: '0'
          history: 7d
          description: 'The descriptors of the used file.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.fd_used
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: storage
        - uuid: 70ec112fc828476e96a469e0f94fc415
          name: 'RabbitMQ: Memory alarm'
          type: DEPENDENT
          key: rabbitmq.node.mem_alarm
          delay: '0'
          history: 7d
          description: 'It checks whether the host has a memory alarm or not.'
          valuemap:
            name: 'Alarm state'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.mem_alarm
            - type: BOOL_TO_DECIMAL
              parameters:
                - ''
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: memory
          triggers:
            - uuid: 843be64cfdcd4df5b3fea4726da69c7e
              expression: 'last(/RabbitMQ node by HTTP/rabbitmq.node.mem_alarm)=1'
              name: 'RabbitMQ: Memory alarm'
              event_name: 'RabbitMQ: Memory alarm (Memory usage threshold has been reached)'
              opdata: 'Current state: {ITEM.LASTVALUE1}'
              priority: AVERAGE
              description: 'For more details see [Memory Alarms](https://www.rabbitmq.com/memory.html).'
              tags:
                - tag: scope
                  value: performance
        - uuid: 2445b494bf0648248b333d6f0afd95a2
          name: 'RabbitMQ: Memory limit'
          type: DEPENDENT
          key: rabbitmq.node.mem_limit
          delay: '0'
          history: 7d
          units: B
          description: 'The memory usage with high watermark properties expressed in bytes.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.mem_limit
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: memory
        - uuid: 9e4f2c0cb6604364ab0a2b4def7466e2
          name: 'RabbitMQ: Memory used'
          type: DEPENDENT
          key: rabbitmq.node.mem_used
          delay: '0'
          history: 7d
          units: B
          description: 'The memory usage expressed in bytes.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.mem_used
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: memory
        - uuid: 129026dd49124ff2ba4f0bcc7f1fa9de
          name: 'RabbitMQ: Management plugin version'
          type: DEPENDENT
          key: rabbitmq.node.overview.management_version
          delay: '0'
          history: 7d
          trends: '0'
          value_type: CHAR
          description: 'The version of the management plugin in use.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.management_version
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          master_item:
            key: rabbitmq.get_node_overview
          tags:
            - tag: component
              value: system
        - uuid: d63d8001d5134e2590d3e7ca8b62958c
          name: 'RabbitMQ: RabbitMQ version'
          type: DEPENDENT
          key: rabbitmq.node.overview.rabbitmq_version
          delay: '0'
          history: 7d
          trends: '0'
          value_type: CHAR
          description: 'The version of the RabbitMQ on the node, which processed this request.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.rabbitmq_version
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1d
          master_item:
            key: rabbitmq.get_node_overview
          tags:
            - tag: component
              value: system
          triggers:
            - uuid: 19989038dfe84fcdb12262ee3782ab41
              expression: 'last(/RabbitMQ node by HTTP/rabbitmq.node.overview.rabbitmq_version,#1)<>last(/RabbitMQ node by HTTP/rabbitmq.node.overview.rabbitmq_version,#2) and length(last(/RabbitMQ node by HTTP/rabbitmq.node.overview.rabbitmq_version))>0'
              name: 'RabbitMQ: Version has changed'
              event_name: 'RabbitMQ: Version has changed (new version: {ITEM.VALUE})'
              priority: INFO
              description: 'RabbitMQ version has changed. Acknowledge to close the problem manually.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
        - uuid: ac9282c012bd4249a096a462d21dcf62
          name: 'RabbitMQ: Number of network partitions'
          type: DEPENDENT
          key: rabbitmq.node.partitions
          delay: '0'
          history: 7d
          description: 'The number of network partitions, which this node "sees".'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.partitions
            - type: JAVASCRIPT
              parameters:
                - 'return JSON.parse(value).length;'
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: network
          triggers:
            - uuid: 943d239a9fa5443dac3205c65a4da033
              expression: 'min(/RabbitMQ node by HTTP/rabbitmq.node.partitions,5m)>0'
              name: 'RabbitMQ: Number of network partitions is too high'
              event_name: 'RabbitMQ: Number of network partitions is too high (more than 0 for 5m)'
              opdata: 'Current value: {ITEM.LASTVALUE1}'
              priority: WARNING
              description: 'For more details see [Detecting Network Partitions](https://www.rabbitmq.com/partitions.html#detecting).'
              tags:
                - tag: scope
                  value: performance
        - uuid: 5f819282c32b49039a2dae56b9be23cd
          name: 'RabbitMQ: Is running'
          type: DEPENDENT
          key: rabbitmq.node.running
          delay: '0'
          history: 7d
          description: 'It "sees" whether the node is running or not.'
          valuemap:
            name: 'Service state'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.running
            - type: BOOL_TO_DECIMAL
              parameters:
                - ''
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: system
          triggers:
            - uuid: 4b15e72e2133458ebac9c72c5fcb90e6
              expression: 'max(/RabbitMQ node by HTTP/rabbitmq.node.running,5m)=0'
              name: 'RabbitMQ: Node is not running'
              opdata: 'Current state: {ITEM.LASTVALUE1}'
              priority: AVERAGE
              description: 'RabbitMQ node is not running.'
              dependencies:
                - name: 'RabbitMQ: Service is down'
                  expression: 'last(/RabbitMQ node by HTTP/net.tcp.service["{$RABBITMQ.API.SCHEME}","{HOST.CONN}","{$RABBITMQ.API.PORT}"])=0'
              tags:
                - tag: scope
                  value: availability
        - uuid: ddc906d9a969401ebf520490e62f4086
          name: 'RabbitMQ: Runtime run queue'
          type: DEPENDENT
          key: rabbitmq.node.run_queue
          delay: '0'
          history: 7d
          description: 'The average number of Erlang processes waiting to run.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.run_queue
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: system
        - uuid: 16f4f6a6d8f14980a6edcc2d84b0cd8d
          name: 'RabbitMQ: Sockets available'
          type: DEPENDENT
          key: rabbitmq.node.sockets_total
          delay: '0'
          history: 7d
          description: 'The file descriptors available for use as sockets.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.sockets_total
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: system
        - uuid: 31455694c0994c9d9eaa8af048e88e95
          name: 'RabbitMQ: Sockets used'
          type: DEPENDENT
          key: rabbitmq.node.sockets_used
          delay: '0'
          history: 7d
          description: 'The number of file descriptors used as sockets.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.sockets_used
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: system
        - uuid: 65a2fd59ddfe413b9259c547338f3351
          name: 'RabbitMQ: Uptime'
          type: DEPENDENT
          key: rabbitmq.node.uptime
          delay: '0'
          history: 7d
          value_type: FLOAT
          units: s
          description: 'Uptime expressed in milliseconds.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.uptime
            - type: MULTIPLIER
              parameters:
                - '0.001'
          master_item:
            key: rabbitmq.get_nodes
          tags:
            - tag: component
              value: system
          triggers:
            - uuid: 6edfa365704f480da4b35b51b6ed84f4
              expression: 'last(/RabbitMQ node by HTTP/rabbitmq.node.uptime)<10m'
              name: 'RabbitMQ: Host has been restarted'
              event_name: 'RabbitMQ: {HOST.NAME} has been restarted (uptime < 10m)'
              priority: INFO
              description: 'Uptime is less than 10 minutes.'
              manual_close: 'YES'
              tags:
                - tag: scope
                  value: notice
      discovery_rules:
        - uuid: fd10dbe5b1ba407dbb52632ecd713ccf
          name: 'Health Check 3.8.9- discovery'
          type: DEPENDENT
          key: rabbitmq.healthcheck.v389.discovery
          delay: '0'
          description: 'Specific metrics for the versions: up to and including 3.8.4.'
          item_prototypes:
            - uuid: 22f9a51fd0ea41148846ecde7dbf4d99
              name: 'RabbitMQ: Healthcheck{#SINGLETON}'
              type: HTTP_AGENT
              key: 'rabbitmq.healthcheck[{#SINGLETON}]'
              history: 7d
              authtype: BASIC
              username: '{$RABBITMQ.API.USER}'
              password: '{$RABBITMQ.API.PASSWORD}'
              description: 'It checks whether the RabbitMQ application is running; and whether the channels and queues can be listed successfully; and that no alarms are in effect.'
              valuemap:
                name: 'RabbitMQ healthcheck'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.status
                - type: BOOL_TO_DECIMAL
                  parameters:
                    - ''
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/healthchecks/node'
              tags:
                - tag: component
                  value: health
                - tag: component
                  value: system
              trigger_prototypes:
                - uuid: 5c9c080ddd3748a6b5e62ba7765d270d
                  expression: 'last(/RabbitMQ node by HTTP/rabbitmq.healthcheck[{#SINGLETON}])=0'
                  name: 'RabbitMQ: Node healthcheck failed'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'For more details see [Health Checks](https://www.rabbitmq.com/monitoring.html#health-checks).'
                  tags:
                    - tag: scope
                      value: availability
          master_item:
            key: rabbitmq.get_node_overview
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.management_version
            - type: JAVASCRIPT
              parameters:
                - |
                  var rabbit_version = parseInt(value.split('.')[0]) * 10000 +
                      parseInt(value.split('.')[1]) * 100 +
                      parseInt(value.split('.')[2]);
                  return JSON.stringify(rabbit_version < 30810 ? [{ '{#SINGLETON}': '' }] : []);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: ab89d103c015400fbbeecaaf9bf01400
          name: 'Health Check 3.8.10+ discovery'
          type: DEPENDENT
          key: rabbitmq.healthcheck.v3810.discovery
          delay: '0'
          description: 'Specific metrics for the versions: up to and including 3.8.10.'
          item_prototypes:
            - uuid: d18cd1fd8cd749e4a00b8186fd93345f
              name: 'RabbitMQ: Healthcheck: expiration date on the certificates{#SINGLETON}'
              type: HTTP_AGENT
              key: 'rabbitmq.healthcheck.certificate_expiration[{#SINGLETON}]'
              history: 7d
              authtype: BASIC
              username: '{$RABBITMQ.API.USER}'
              password: '{$RABBITMQ.API.PASSWORD}'
              description: |
                It checks the expiration date on the certificates for every listener configured to use the Transport Layer Security (TLS).
                It responds with a status code `200 OK` if all the certificates are valid (have not expired).
                Otherwise, it responds with a status code `503 Service Unavailable`.
              valuemap:
                name: 'RabbitMQ healthcheck'
              preprocessing:
                - type: REGEX
                  parameters:
                    - HTTP\/1\.1\b\s(\d+)
                    - \1
                - type: JAVASCRIPT
                  parameters:
                    - |
                      switch(value){
                      case '200': return 1
                      case '503': return 0
                      default: 2}
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/health/checks/certificate-expiration/1/months'
              status_codes: '200,503,404'
              retrieve_mode: HEADERS
              tags:
                - tag: component
                  value: certificate
                - tag: component
                  value: health
              trigger_prototypes:
                - uuid: 20f7cd2d1d2448d5b84711caba2f093b
                  expression: 'last(/RabbitMQ node by HTTP/rabbitmq.healthcheck.certificate_expiration[{#SINGLETON}])=0'
                  name: 'RabbitMQ: There are valid TLS certificates expiring in the next month'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'This is the default API endpoint path: http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html.'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: e1359646453e43cbaf0b4e1b89bdcdeb
              name: 'RabbitMQ: Healthcheck: local alarms in effect on this node{#SINGLETON}'
              type: HTTP_AGENT
              key: 'rabbitmq.healthcheck.local_alarms[{#SINGLETON}]'
              history: 7d
              authtype: BASIC
              username: '{$RABBITMQ.API.USER}'
              password: '{$RABBITMQ.API.PASSWORD}'
              description: |
                It responds with a status code `200 OK` if there are no alarms in effect in the cluster.
                Otherwise, it responds with a status code `503 Service Unavailable`.
              valuemap:
                name: 'RabbitMQ healthcheck'
              preprocessing:
                - type: REGEX
                  parameters:
                    - HTTP\/1\.1\b\s(\d+)
                    - \1
                - type: JAVASCRIPT
                  parameters:
                    - |
                      switch(value){
                      case '200': return 1
                      case '503': return 0
                      default: 2}
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/health/checks/local-alarms'
              status_codes: '200,503,404'
              retrieve_mode: HEADERS
              tags:
                - tag: component
                  value: health
                - tag: component
                  value: system
              trigger_prototypes:
                - uuid: 9761757a70bf4f65b9438471a5de2af0
                  expression: 'last(/RabbitMQ node by HTTP/rabbitmq.healthcheck.local_alarms[{#SINGLETON}])=0'
                  name: 'RabbitMQ: There are active alarms in the node'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'This is the default API endpoint path: http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html.'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 9867c266760a48d981caa1f34f2c3238
              name: 'RabbitMQ: Healthcheck: classic mirrored queues without synchronized mirrors online{#SINGLETON}'
              type: HTTP_AGENT
              key: 'rabbitmq.healthcheck.mirror_sync[{#SINGLETON}]'
              history: 7d
              authtype: BASIC
              username: '{$RABBITMQ.API.USER}'
              password: '{$RABBITMQ.API.PASSWORD}'
              description: |
                It checks if there are classic mirrored queues without synchronized mirrors online (queues that would potentially lose data if the target node is shut down).
                It responds with a status code `200 OK` if there are no such classic mirrored queues.
                Otherwise, it responds with a status code `503 Service Unavailable`.
              valuemap:
                name: 'RabbitMQ healthcheck'
              preprocessing:
                - type: REGEX
                  parameters:
                    - HTTP\/1\.1\b\s(\d+)
                    - \1
                - type: JAVASCRIPT
                  parameters:
                    - |
                      switch(value){
                      case '200': return 1
                      case '503': return 0
                      default: 2}
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/health/checks/node-is-mirror-sync-critical'
              status_codes: '200,503,404'
              retrieve_mode: HEADERS
              tags:
                - tag: component
                  value: health
                - tag: component
                  value: queues
              trigger_prototypes:
                - uuid: 36b4702437614a3681a5a77acef323fc
                  expression: 'last(/RabbitMQ node by HTTP/rabbitmq.healthcheck.mirror_sync[{#SINGLETON}])=0'
                  name: 'RabbitMQ: There are queues that could potentially lose data if this node goes offline.'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'This is the default API endpoint path: http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html.'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: 972b6409c80d4ac796e5472b72ce82ae
              name: 'RabbitMQ: Healthcheck: queues with minimum online quorum{#SINGLETON}'
              type: HTTP_AGENT
              key: 'rabbitmq.healthcheck.quorum[{#SINGLETON}]'
              history: 7d
              authtype: BASIC
              username: '{$RABBITMQ.API.USER}'
              password: '{$RABBITMQ.API.PASSWORD}'
              description: |
                It checks if there are quorum queues with minimum online quorum (queues that would lose their quorum and availability if the target node is shut down).
                It responds with a status code `200 OK` if there are no such quorum queues.
                Otherwise, it responds with a status code `503 Service Unavailable`.
              valuemap:
                name: 'RabbitMQ healthcheck'
              preprocessing:
                - type: REGEX
                  parameters:
                    - HTTP\/1\.1\b\s(\d+)
                    - \1
                - type: JAVASCRIPT
                  parameters:
                    - |
                      switch(value){
                      case '200': return 1
                      case '503': return 0
                      default: 2}
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/health/checks/node-is-quorum-critical'
              status_codes: '200,503,404'
              retrieve_mode: HEADERS
              tags:
                - tag: component
                  value: health
                - tag: component
                  value: queues
              trigger_prototypes:
                - uuid: cfaba160cc0441c09010de05316596bd
                  expression: 'last(/RabbitMQ node by HTTP/rabbitmq.healthcheck.quorum[{#SINGLETON}])=0'
                  name: 'RabbitMQ: There are queues that would lose their quorum and availability if this node is shut down.'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'This is the default API endpoint path: http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html.'
                  tags:
                    - tag: scope
                      value: notice
            - uuid: d701b9acae86464282b308df720a1de2
              name: 'RabbitMQ: Healthcheck: virtual hosts on this node{#SINGLETON}'
              type: HTTP_AGENT
              key: 'rabbitmq.healthcheck.virtual_hosts[{#SINGLETON}]'
              history: 7d
              authtype: BASIC
              username: '{$RABBITMQ.API.USER}'
              password: '{$RABBITMQ.API.PASSWORD}'
              description: |
                It responds with It responds with a status code `200 OK` if all virtual hosts are running on the target node.
                Otherwise it responds with a status code `503 Service Unavailable`.
              valuemap:
                name: 'RabbitMQ healthcheck'
              preprocessing:
                - type: REGEX
                  parameters:
                    - HTTP\/1\.1\b\s(\d+)
                    - \1
                - type: JAVASCRIPT
                  parameters:
                    - |
                      switch(value){
                      case '200': return 1
                      case '503': return 0
                      default: 2}
                - type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 3h
              url: '{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/health/checks/virtual-hosts'
              status_codes: '200,503,404'
              retrieve_mode: HEADERS
              tags:
                - tag: component
                  value: health
                - tag: component
                  value: system
              trigger_prototypes:
                - uuid: d1638953e2794c3e8113ba907837c968
                  expression: 'last(/RabbitMQ node by HTTP/rabbitmq.healthcheck.virtual_hosts[{#SINGLETON}])=0'
                  name: 'RabbitMQ: There are not running virtual hosts'
                  opdata: 'Current state: {ITEM.LASTVALUE1}'
                  priority: AVERAGE
                  description: 'This is the default API endpoint path: http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html.'
                  tags:
                    - tag: scope
                      value: notice
          master_item:
            key: rabbitmq.get_node_overview
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.management_version
            - type: JAVASCRIPT
              parameters:
                - |
                  var rabbit_version = parseInt(value.split('.')[0]) * 10000 +
                      parseInt(value.split('.')[1]) * 100 +
                      parseInt(value.split('.')[2]);
                  return JSON.stringify(rabbit_version >= 30810 ? [{ '{#SINGLETON}': '' }] : []);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
        - uuid: cc1d85b6045b44b38f588cd9a4c6c62d
          name: 'Queues discovery'
          type: DEPENDENT
          key: rabbitmq.queues.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NODE}'
                value: '{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}'
                formulaid: A
              - macro: '{#QUEUE}'
                value: '{$RABBITMQ.LLD.FILTER.QUEUE.MATCHES}'
                formulaid: B
              - macro: '{#QUEUE}'
                value: '{$RABBITMQ.LLD.FILTER.QUEUE.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
          description: 'The metrics for an individual queue.'
          item_prototypes:
            - uuid: 335ed3ef31e2471b9cdb25537cee4fe8
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Get data'
              type: DEPENDENT
              key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: '0'
              trends: '0'
              value_type: TEXT
              description: 'The HTTP API endpoint that returns [{#VHOST}][{#QUEUE}] queue metrics'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$[?(@.name == "{#QUEUE}" && @.vhost == "{#VHOST}")].first()'
              master_item:
                key: rabbitmq.get_queues
              tags:
                - tag: component
                  value: raw
            - uuid: be1c1c6b727a45cca039f0f00f184943
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Consumers'
              type: DEPENDENT
              key: 'rabbitmq.queue.consumers["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'The number of consumers.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.consumers
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: consumers
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: 5d420017c0f14f37aa7c7ef986b54a77
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Memory'
              type: DEPENDENT
              key: 'rabbitmq.queue.memory["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              units: B
              description: 'The bytes of memory consumed by the Erlang process associated with the queue, including stack, heap and internal structures.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.memory
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: memory
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: 3902227627d84cad8794604bd4f091fd
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages acknowledged per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.ack.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'The number of messages (per second) delivered to clients and acknowledged.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.message_stats.ack_details.rate
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: 2f2ca541c80b47cba2b5147a1c77aac5
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages acknowledged'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.ack["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'The number of messages delivered to clients and acknowledged.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.message_stats.ack
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: b8a9c0ca7fda4756a8b79ac83c4bcd07
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages delivered per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.deliver.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'The count of messages (per second) delivered to consumers in acknowledgement mode.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.message_stats.deliver_details.rate
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: e150c5d35ed144ca87945ef4f7a0998a
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages delivered'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.deliver["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'The count of messages delivered to consumers in acknowledgement mode.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.message_stats.deliver
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: 9b74bc2a830e43e28ad6c44037dbd1d7
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Sum of messages delivered per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.deliver_get.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'The rate of delivery per second. The sum of messages delivered (per second) to consumers: in acknowledgement mode and in no-acknowledgement mode; delivered to consumers in response to `basic.get`: in acknowledgement mode and in no-acknowledgement mode.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.message_stats.deliver_get_details.rate
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: 837c46d0fd7d4ad18669dcbf62ae7025
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Sum of messages delivered'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.deliver_get["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'The sum of messages delivered to consumers: in acknowledgement mode and in no-acknowledgement mode; delivered to consumers in response to the `basic.get`: in acknowledgement mode and in no-acknowledgement mode.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.message_stats.deliver_get
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: 232ee8103a5d4fb6b2b41ca641f19088
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages published per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.publish.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'The rate of published messages per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.message_stats.publish_details.rate
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: dfafc461ad8a45ba8f08a12ec9f4e2d3
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages published'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.publish["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'The count of published messages.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.message_stats.publish
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: 888dbb2c1b13429b9d20034fcc783f14
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'The count of total messages per second in the queue.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.messages_details.rate
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: a34e852ddce64d80a88129eef9ba1ab2
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages redelivered per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.redeliver.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'The rate of messages redelivered per second.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.message_stats.redeliver_details.rate
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: 75501a52ffab4972a5988ac4ae0c82d8
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages redelivered'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages.redeliver["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'The count of subset of messages in the `deliver_get` queue with the `redelivered` flag set.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.message_stats.redeliver
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: 171e5dbff18f47c98da2c1a3b7120622
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages total'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'The count of total messages in the queue.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.messages
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
              trigger_prototypes:
                - uuid: b6f52153a22144338e6d002287446ac1
                  expression: 'min(/RabbitMQ node by HTTP/rabbitmq.queue.messages["{#VHOST}/{#QUEUE}"],5m)>{$RABBITMQ.MESSAGES.MAX.WARN:"{#QUEUE}"}'
                  name: 'RabbitMQ: Too many messages in queue [{#VHOST}][{#QUEUE}]'
                  event_name: 'RabbitMQ: Too many messages in queue [{#VHOST}][{#QUEUE}] (over {$RABBITMQ.MESSAGES.MAX.WARN:"{#QUEUE}"} for 5m)'
                  opdata: 'Current value: {ITEM.LASTVALUE1}'
                  priority: WARNING
                  tags:
                    - tag: scope
                      value: performance
            - uuid: f55c5f66ddac46fd95c5379875342284
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages ready per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages_ready.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'The number of messages per second ready to be delivered to clients.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.messages_ready_details.rate
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: 67c9a8eee9a54eed946ab141927494c4
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages ready'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages_ready["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'The number of messages ready to be delivered to clients.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.messages_ready
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: a8cc3296990640a6bf5d7319ba2e8650
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages unacknowledged per second'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages_unacknowledged.rate["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'The number of messages per second delivered to clients but not yet acknowledged.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.messages_unacknowledged_details.rate
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
            - uuid: bb6a84983caa486482e241c6bf7e9534
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages unacknowledged'
              type: DEPENDENT
              key: 'rabbitmq.queue.messages_unacknowledged["{#VHOST}/{#QUEUE}"]'
              delay: '0'
              history: 7d
              description: 'The number of messages delivered to clients but not yet acknowledged.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.messages_unacknowledged
              master_item:
                key: 'rabbitmq.get_exchanges["{#VHOST}/{#QUEUE}"]'
              tags:
                - tag: component
                  value: messages
                - tag: queue
                  value: '{#QUEUE}'
                - tag: vhost
                  value: '{#VHOST}'
          graph_prototypes:
            - uuid: 4e6b194fd13f4b97a66ee4d335958003
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages per second'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.rate["{#VHOST}/{#QUEUE}"]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.ack.rate["{#VHOST}/{#QUEUE}"]'
                - sortorder: '2'
                  color: 00611C
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.deliver.rate["{#VHOST}/{#QUEUE}"]'
                - sortorder: '3'
                  color: F7941D
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.deliver_get.rate["{#VHOST}/{#QUEUE}"]'
                - sortorder: '4'
                  color: FC6EA3
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.publish.rate["{#VHOST}/{#QUEUE}"]'
                - sortorder: '5'
                  color: 6C59DC
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages_ready.rate["{#VHOST}/{#QUEUE}"]'
                - sortorder: '6'
                  color: C7A72D
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.redeliver.rate["{#VHOST}/{#QUEUE}"]'
                - sortorder: '7'
                  color: BA2A5D
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages_unacknowledged.rate["{#VHOST}/{#QUEUE}"]'
            - uuid: adba8787c1d14670a5ca3bf07d9dc663
              name: 'RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages status'
              graph_items:
                - color: 199C0D
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages["{#VHOST}/{#QUEUE}"]'
                - sortorder: '1'
                  color: F63100
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.ack["{#VHOST}/{#QUEUE}"]'
                - sortorder: '2'
                  color: 00611C
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.deliver["{#VHOST}/{#QUEUE}"]'
                - sortorder: '3'
                  color: F7941D
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.deliver_get["{#VHOST}/{#QUEUE}"]'
                - sortorder: '4'
                  color: FC6EA3
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.publish["{#VHOST}/{#QUEUE}"]'
                - sortorder: '5'
                  color: 6C59DC
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages_ready["{#VHOST}/{#QUEUE}"]'
                - sortorder: '6'
                  color: C7A72D
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages.redeliver["{#VHOST}/{#QUEUE}"]'
                - sortorder: '7'
                  color: BA2A5D
                  item:
                    host: 'RabbitMQ node by HTTP'
                    key: 'rabbitmq.queue.messages_unacknowledged["{#VHOST}/{#QUEUE}"]'
          master_item:
            key: rabbitmq.get_queues
          lld_macro_paths:
            - lld_macro: '{#NODE}'
              path: $.node
            - lld_macro: '{#QUEUE}'
              path: $.name
            - lld_macro: '{#VHOST}'
              path: $.vhost
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - 'return JSON.stringify(JSON.parse(value),[''node'',''name'',''vhost'']);'
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
      tags:
        - tag: class
          value: software
        - tag: target
          value: rabbitmq
      macros:
        - macro: '{$RABBITMQ.API.PASSWORD}'
          value: zabbix
        - macro: '{$RABBITMQ.API.PORT}'
          value: '15672'
          description: 'The port of the RabbitMQ API endpoint.'
        - macro: '{$RABBITMQ.API.SCHEME}'
          value: http
          description: 'The request scheme, which may be HTTP or HTTPS.'
        - macro: '{$RABBITMQ.API.USER}'
          value: zbx_monitor
        - macro: '{$RABBITMQ.CLUSTER.NAME}'
          value: rabbit
          description: 'The name of the RabbitMQ cluster.'
        - macro: '{$RABBITMQ.LLD.FILTER.QUEUE.MATCHES}'
          value: '.*'
          description: 'This macro is used in the discovery of queues. It can be overridden at host level or its linked template level.'
        - macro: '{$RABBITMQ.LLD.FILTER.QUEUE.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in the discovery of queues. It can be overridden at host level or its linked template level.'
        - macro: '{$RABBITMQ.MESSAGES.MAX.WARN}'
          value: '1000'
          description: 'The maximum number of messages in the queue for a trigger expression.'
        - macro: '{$RABBITMQ.RESPONSE_TIME.MAX.WARN}'
          value: '10'
          description: 'The maximum response time by the RabbitMQ expressed in seconds for a trigger expression.'
      dashboards:
        - uuid: 5e70f5ff6706442abc83ec1b206d9fe4
          name: 'RabbitMQ node status'
          pages:
            - widgets:
                - type: GRAPH_CLASSIC
                  width: '12'
                  height: '5'
                  fields:
                    - type: GRAPH
                      name: graphid
                      value:
                        host: 'RabbitMQ node by HTTP'
                        name: 'RabbitMQ: Node status'
                - type: GRAPH_CLASSIC
                  'y': '5'
                  width: '12'
                  height: '5'
                  fields:
                    - type: GRAPH
                      name: graphid
                      value:
                        host: 'RabbitMQ node by HTTP'
                        name: 'RabbitMQ: Disk free'
                - type: GRAPH_CLASSIC
                  'y': '10'
                  width: '12'
                  height: '5'
                  fields:
                    - type: GRAPH
                      name: graphid
                      value:
                        host: 'RabbitMQ node by HTTP'
                        name: 'RabbitMQ: File descriptors'
                - type: GRAPH_CLASSIC
                  x: '12'
                  width: '12'
                  height: '5'
                  fields:
                    - type: GRAPH
                      name: graphid
                      value:
                        host: 'RabbitMQ node by HTTP'
                        name: 'RabbitMQ: Uptime'
                - type: GRAPH_CLASSIC
                  x: '12'
                  'y': '5'
                  width: '12'
                  height: '5'
                  fields:
                    - type: GRAPH
                      name: graphid
                      value:
                        host: 'RabbitMQ node by HTTP'
                        name: 'RabbitMQ: Memory used'
                - type: GRAPH_CLASSIC
                  x: '12'
                  'y': '10'
                  width: '12'
                  height: '5'
                  fields:
                    - type: GRAPH
                      name: graphid
                      value:
                        host: 'RabbitMQ node by HTTP'
                        name: 'RabbitMQ: Sockets'
      valuemaps:
        - uuid: e65c3d3e8ea443a281b37c51ca461c26
          name: 'Alarm state'
          mappings:
            - value: '0'
              newvalue: Ok
            - value: '1'
              newvalue: Alarm
        - uuid: 55188bbb2ede4300a6292b373ee36ab7
          name: 'RabbitMQ healthcheck'
          mappings:
            - value: '0'
              newvalue: Failed
            - value: '1'
              newvalue: Ok
            - value: '2'
              newvalue: Error
        - uuid: aaf7d0b8b306412b8a3272343708518f
          name: 'Service state'
          mappings:
            - value: '0'
              newvalue: Down
            - value: '1'
              newvalue: Up
  graphs:
    - uuid: 02f7ec07b4384795bbf5212e9ea06fb0
      name: 'RabbitMQ: Disk free'
      graph_items:
        - drawtype: GRADIENT_LINE
          color: 199C0D
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.disk_free
        - sortorder: '1'
          drawtype: BOLD_LINE
          color: FF0000
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.disk_free_limit
    - uuid: 71eff9e96a8b46acbe1cf00d1e0cc388
      name: 'RabbitMQ: File descriptors'
      graph_items:
        - color: 199C0D
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.fd_used
    - uuid: d4e9c478e03c4ecab7538c3baa77f61f
      name: 'RabbitMQ: Memory used'
      graph_items:
        - drawtype: GRADIENT_LINE
          color: 199C0D
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.mem_used
        - sortorder: '1'
          drawtype: BOLD_LINE
          color: FF0000
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.mem_limit
    - uuid: e6497c3e2847407ca8f912e34d9357b4
      name: 'RabbitMQ: Node status'
      graph_items:
        - drawtype: BOLD_LINE
          color: 199C0D
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.running
    - uuid: f3c071a0c20340f1bf86ecd66b911bb2
      name: 'RabbitMQ: Sockets'
      graph_items:
        - drawtype: GRADIENT_LINE
          color: 199C0D
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.sockets_used
        - sortorder: '1'
          color: F63100
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.sockets_total
    - uuid: 415ce1917ecc4575bcbeeaf3b01df4cb
      name: 'RabbitMQ: Uptime'
      graph_items:
        - color: 199C0D
          item:
            host: 'RabbitMQ node by HTTP'
            key: rabbitmq.node.uptime
