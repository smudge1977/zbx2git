zabbix_export:
  version: '6.0'
  date: '2024-08-25T12:38:16Z'
  groups:
    - uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
      name: Templates/Applications
    - uuid: 36bff6c29af64692839d077febfc7079
      name: 'Templates/Network devices'
  templates:
    - uuid: 2fca6b60914b4fa98132b1a7885ab014
      template: 'Cisco Meraki dashboard by HTTP'
      name: 'Cisco Meraki dashboard by HTTP'
      description: |
        Template for monitoring Cisco Meraki dashboard https://meraki.cisco.com/products/meraki-dashboard/
        
        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/
        
        Generated by official Zabbix template tool "Templator"
      groups:
        - name: Templates/Applications
        - name: 'Templates/Network devices'
      items:
        - uuid: d1a5f3c79a604bae98c314d2aed64ff4
          name: 'Meraki: Get data'
          type: SCRIPT
          key: meraki.get.data
          delay: 1h
          history: '0'
          trends: '0'
          value_type: TEXT
          params: |
            var params = JSON.parse(value);
            
            var request = new HttpRequest();
            
            request.addHeader('X-Cisco-Meraki-API-Key:' + params.token);
            request.addHeader('User-Agent: ZabbixServer/1.1 Zabbix');
            
            var response,
            	error_msg = '',
            	organizations = [],
            	devices = [];
            
            function getHttpData(url) {
            	response = request.get(url);
            	Zabbix.log(4, '[ Meraki API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
            
            	if (response !== null) {
            		try {
            			response = JSON.parse(response);
            		}
            		catch (error) {
            			throw 'Failed to parse response received from Meraki API. Check debug log for more information.';
            		}
            	}
            
            	if (request.getStatus() !== 200) {
            		if (response.errors) {
            			throw response.errors.join(', ');
            		} else {
            			throw 'Failed to receive data: invalid response status code.';
            		}
            	}
            
            	if (typeof (response) !== 'object' || response === null) {
            		throw 'Cannot process response data: received data is not an object.';
            	}
            
            	return response;
            };
            
            try {
            
            	if (params.token === '{' + '$MERAKI.TOKEN}') {
            		throw 'Please change {' + '$MERAKI.TOKEN} macro to the proper value.';
            	}
            
            	if (params.url.indexOf('http://') === -1 && params.url.indexOf('https://') === -1) {
            		params.url = 'https://' + params.url;
            	}
            
            	if (!params.url.endsWith('/')) {
            		params.url += '/';
            	}
            
            	if (typeof params.httpproxy !== 'undefined' && params.httpproxy !== '') {
            		request.setProxy(params.httpproxy);
            	}
            
            	organizations = getHttpData(params.url + 'organizations');
            
            	if (Array.isArray(organizations) && organizations.length > 0) {
            		for (i in organizations) {
            			if ('id' in organizations[i]) {
            				organization_devices = getHttpData(params.url + 'organizations/' + encodeURIComponent(organizations[i].id) + '/devices/statuses');
            
            				if (Array.isArray(organization_devices) && organization_devices.length > 0) {
            					for (j in organization_devices) {
            						organization_devices[j].organizationId = organizations[i].id;
            						if (!organization_devices[j].name) {
            							organization_devices[j].name = organization_devices[j].serial;
            						}
            						devices.push(organization_devices[j]);
            					}
            				}
            			}
            		}
            	}
            
            } catch (error) {
            	error_msg = error;
            };
            
            return JSON.stringify({
            	'organizations': organizations,
            	'devices': devices,
            	'error': error_msg.toString()
            });
          description: 'Item for gathering all the organizations and devices from Meraki API.'
          timeout: '{$MERAKI.DATA.TIMEOUT}'
          parameters:
            - name: httpproxy
              value: '{$MERAKI.HTTP_PROXY}'
            - name: token
              value: '{$MERAKI.TOKEN}'
            - name: url
              value: '{$MERAKI.API.URL}'
          tags:
            - tag: component
              value: raw
        - uuid: 6fdd764d820341e7bd2a24f42802c58a
          name: 'Meraki: Data item errors'
          type: DEPENDENT
          key: meraki.get.data.errors
          delay: '0'
          history: 7d
          trends: '0'
          value_type: TEXT
          description: 'Item for gathering all the data item errors.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: meraki.get.data
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: 2bf9355f548e4e9b9b8581fb43f175fe
              expression: 'length(last(/Cisco Meraki dashboard by HTTP/meraki.get.data.errors))>0'
              name: 'Meraki: There are errors in ''Get data'' metric'
              priority: WARNING
              tags:
                - tag: scope
                  value: availability
      discovery_rules:
        - uuid: 6488b49e692e4fe8b6a1c57f56b6ba7d
          name: 'Devices discovery'
          type: DEPENDENT
          key: meraki.devices.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$MERAKI.DEVICE.NAME.MATCHES}'
                formulaid: A
              - macro: '{#NAME}'
                value: '{$MERAKI.DEVICE.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#STATUS}'
                value: '{$MERAKI.DEVICE.STATUS.MATCHES}'
                formulaid: C
              - macro: '{#STATUS}'
                value: '{$MERAKI.DEVICE.STATUS.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: D
          host_prototypes:
            - uuid: 86d599f384d94b368508a170911213ec
              host: '{#SERIAL}'
              name: '[{#PRODUCT_TYPE}] {#NAME}'
              group_links:
                - group:
                    name: Templates/Applications
              templates:
                - name: 'Cisco Meraki device by HTTP'
              macros:
                - macro: '{$MAC}'
                  value: '{#MAC}'
                  description: 'MAC address of the device.'
                - macro: '{$NETWORK.ID}'
                  value: '{#NETWORK.ID}'
                  description: 'Network ID of the device.'
                - macro: '{$ORGANIZATION_ID}'
                  value: '{#ORGANIZATION_ID}'
                  description: 'Organization ID of the device.'
                - macro: '{$SERIAL}'
                  value: '{#SERIAL}'
                  description: 'Serial number of the device.'
              tags:
                - tag: model
                  value: '{#MODEL}'
                - tag: serial-number
                  value: '{#SERIAL}'
          master_item:
            key: meraki.get.data
          lld_macro_paths:
            - lld_macro: '{#MAC}'
              path: $.mac
            - lld_macro: '{#MODEL}'
              path: $.model
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#NETWORK.ID}'
              path: $.networkId
            - lld_macro: '{#ORGANIZATION_ID}'
              path: $.organizationId
            - lld_macro: '{#PRODUCT_TYPE}'
              path: $.productType
            - lld_macro: '{#SERIAL}'
              path: $.serial
            - lld_macro: '{#STATUS}'
              path: $.status
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.devices
        - uuid: 30f38d19659646009ca436d48f9598b0
          name: 'Organizations discovery'
          type: DEPENDENT
          key: meraki.organization.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$MERAKI.ORGANIZATION.NAME.MATCHES}'
                formulaid: A
              - macro: '{#NAME}'
                value: '{$MERAKI.ORGANIZATION.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
          host_prototypes:
            - uuid: 59cd2e995b814d7e9f8411dbc7420c76
              host: '{#NAME}'
              name: '[{#REGION}] {#NAME}'
              group_links:
                - group:
                    name: Templates/Applications
              group_prototypes:
                - name: '{#REGION}'
              templates:
                - name: 'Cisco Meraki organization by HTTP'
              macros:
                - macro: '{$ID}'
                  value: '{#ID}'
                  description: 'ID of the organization.'
          master_item:
            key: meraki.get.data
          lld_macro_paths:
            - lld_macro: '{#ID}'
              path: $.id
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#REGION}'
              path: $.cloud.region.name
            - lld_macro: '{#URL}'
              path: $.url
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.organizations
      tags:
        - tag: class
          value: network
        - tag: target
          value: cisco-meraki-dashboard
      macros:
        - macro: '{$MERAKI.API.URL}'
          value: api.meraki.com/api/v1
          description: 'Cisco Meraki dashboard API URL, e.g., api.meraki.com/api/v1'
        - macro: '{$MERAKI.DATA.TIMEOUT}'
          value: '60'
          description: 'Response timeout for an API.'
        - macro: '{$MERAKI.DEVICE.NAME.MATCHES}'
          value: .+
          description: 'This macro is used in devices discovery. Can be overridden on the host or linked template level.'
        - macro: '{$MERAKI.DEVICE.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in devices discovery. Can be overridden on the host or linked template level.'
        - macro: '{$MERAKI.DEVICE.STATUS.MATCHES}'
          value: '.*'
          description: 'This macro is used in devices discovery. Can be overridden on the host or linked template level.'
        - macro: '{$MERAKI.DEVICE.STATUS.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in devices discovery. Can be overridden on the host or linked template level.'
        - macro: '{$MERAKI.HTTP_PROXY}'
          description: 'HTTP proxy for API requests. You can specify it using the format [protocol://][username[:password]@]proxy.example.com[:port]. See documentation at https://www.zabbix.com/documentation/6.0/manual/config/items/itemtypes/http'
        - macro: '{$MERAKI.ORGANIZATION.NAME.MATCHES}'
          value: .+
          description: 'This macro is used in organizations discovery. Can be overridden on the host or linked template level.'
        - macro: '{$MERAKI.ORGANIZATION.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in organizations discovery. Can be overridden on the host or linked template level.'
        - macro: '{$MERAKI.TOKEN}'
          type: SECRET_TEXT
          description: 'Cisco Meraki dashboard API token.'
