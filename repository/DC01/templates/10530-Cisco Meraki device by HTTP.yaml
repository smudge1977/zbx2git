zabbix_export:
  version: '6.0'
  date: '2024-08-25T12:38:16Z'
  groups:
    - uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
      name: Templates/Applications
    - uuid: 36bff6c29af64692839d077febfc7079
      name: 'Templates/Network devices'
  templates:
    - uuid: 2cae7d2eeca04e6fa7419759ac9ad814
      template: 'Cisco Meraki device by HTTP'
      name: 'Cisco Meraki device by HTTP'
      description: 'Generated by official Zabbix template tool "Templator"'
      groups:
        - name: Templates/Applications
        - name: 'Templates/Network devices'
      items:
        - uuid: 0c97a8fcad764133b4e7c35d0134665c
          name: 'Meraki: Get status'
          type: HTTP_AGENT
          key: meraki.device.get.status
          delay: '{$MERAKI.GET.STATUS.INTERVAL}'
          history: '0'
          trends: '0'
          value_type: TEXT
          description: 'Item for gathering device status from Meraki API.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - '$[0]'
          timeout: '{$MERAKI.DATA.TIMEOUT}'
          url: 'https://{$MERAKI.API.URL}/organizations/{$ORGANIZATION_ID}/devices/statuses?serials[]={$SERIAL}'
          http_proxy: '{$MERAKI.HTTP_PROXY}'
          headers:
            - name: X-Cisco-Meraki-API-Key
              value: '{$MERAKI.TOKEN}'
            - name: User-Agent
              value: 'ZabbixServer/1.1 Zabbix'
          tags:
            - tag: component
              value: raw
        - uuid: 2280b9212c474d99835ec1334ff780eb
          name: 'Meraki: public IP'
          type: DEPENDENT
          key: meraki.device.public.ip
          delay: '0'
          history: 7d
          trends: '0'
          value_type: CHAR
          description: |
            Device public IP
            Network: {$NETWORK.ID}
            MAC: {$MAC}
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.publicIp
          master_item:
            key: meraki.device.get.status
          tags:
            - tag: component
              value: network
        - uuid: 324b748bfe2e4383927176046e246acb
          name: 'Meraki: status'
          type: DEPENDENT
          key: meraki.device.status
          delay: '0'
          history: 7d
          description: |
            Device operational status
            Network: {$NETWORK.ID} 
            MAC: {$MAC}
          valuemap:
            name: 'Device status'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.status
            - type: JAVASCRIPT
              parameters:
                - |
                  switch (value) {
                  	case 'offline':
                  		return 0
                  	case 'online':
                  		return 1
                  	case 'dormant':
                  		return 2
                  	default:
                  		return 10
                  }
          master_item:
            key: meraki.device.get.status
          tags:
            - tag: component
              value: health
          triggers:
            - uuid: 00583ac9e9824f7db22a1685421f0be9
              expression: 'last(/Cisco Meraki device by HTTP/meraki.device.status)<>1'
              name: 'Meraki: Status is not online'
              priority: WARNING
              tags:
                - tag: scope
                  value: availability
        - uuid: e4963b68cdde453f91767ff9e3a31d16
          name: 'Meraki: Get device data'
          type: SCRIPT
          key: meraki.get.device
          delay: '{$MERAKI.UPLINK.LL.TIMESPAN}'
          history: '0'
          trends: '0'
          value_type: TEXT
          params: |
            var params = JSON.parse(value);
            
            var request = new HttpRequest();
            
            request.addHeader('X-Cisco-Meraki-API-Key:' + params.token);
            request.addHeader('User-Agent: ZabbixServer/1.1 Zabbix');
            
            var response,
            	error_msg = '',
            	device = [],
            	uplinksLL = [];
            
            function isFloat(n) {
            	n = parseFloat(n);
            	return Number(n) === n && n % 1 !== 0;
            };
            
            function checkNumber(string) {
            	if (typeof string !== "string" || isNaN(string) || isFloat(string)) {
            		throw 'Incorrect "timespan" parameter given: ' + string + ' Must be an unsigned number';
            	}
            	return string;
            };
            
            function getHttpData(url) {
            	response = request.get(url);
            	Zabbix.log(4, '[ Meraki API ] [ ' + url + ' ] Received response with status code ' + request.getStatus() + ': ' + response);
            
            	if (response !== null) {
            		try {
            			response = JSON.parse(response);
            		}
            		catch (error) {
            			throw 'Failed to parse response received from Meraki API. Check debug log for more information.';
            		}
            	}
            
            	if (request.getStatus() !== 200) {
            		if (response.errors) {
            			throw response.errors.join(', ');
            		} else {
            			throw 'Failed to receive data: invalid response status code.';
            		}
            	}
            
            	if (typeof (response) !== 'object' || response === null) {
            		throw 'Cannot process response data: received data is not an object.';
            	}
            
            	return response;
            };
            
            try {
            
            	if (params.token === '{' + '$MERAKI.TOKEN}') {
            		throw 'Please change {' + '$MERAKI.TOKEN} macro to the proper value.';
            	}
            
            	if (params.url.indexOf('http://') === -1 && params.url.indexOf('https://') === -1) {
            		params.url = 'https://' + params.url;
            	}
            
            	if (!params.url.endsWith('/')) {
            		params.url += '/';
            	}
            
            	if (typeof params.httpproxy !== 'undefined' && params.httpproxy !== '') {
            		request.setProxy(params.httpproxy);
            	}
            
            	timespan = checkNumber('{$MERAKI.UPLINK.LL.TIMESPAN}');
            
            	if (timespan > 86400 || timespan < 1) {
            		throw 'Incorrect "timespan" parameter given: ' + timespan + ' Must be between 1 and 86400 seconds.';
            	}
            
            	uplinksLL = getHttpData(params.url + 'organizations/' + encodeURIComponent(params.organizationId) + '/devices/uplinksLossAndLatency?timespan=' + timespan);
            
            	if (uplinksLL.length > 0) {
            		uplinksLL = uplinksLL.filter(function (device) {
            			return device.serial == params.serial;
            		});
            	}
            
            } catch (error) {
            	error_msg = error;
            };
            
            return JSON.stringify({
            	'uplinksLL': uplinksLL,
            	'error': error_msg.toString()
            });
          description: 'Item for gathering device data from Meraki API.'
          timeout: '{$MERAKI.DATA.TIMEOUT}'
          parameters:
            - name: httpproxy
              value: '{$MERAKI.HTTP_PROXY}'
            - name: organizationId
              value: '{$ORGANIZATION_ID}'
            - name: serial
              value: '{$SERIAL}'
            - name: token
              value: '{$MERAKI.TOKEN}'
            - name: url
              value: '{$MERAKI.API.URL}'
          tags:
            - tag: component
              value: raw
        - uuid: b673516073354c9aaaf60cf3ce2e2fa6
          name: 'Meraki: Device data item errors'
          type: DEPENDENT
          key: meraki.get.device.errors
          delay: '0'
          history: 7d
          trends: '0'
          value_type: TEXT
          description: 'Item for gathering errors of the device item.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: meraki.get.device
          tags:
            - tag: component
              value: error
          triggers:
            - uuid: c8f8af6c92f14dc0bcdf426b124c7344
              expression: 'length(last(/Cisco Meraki device by HTTP/meraki.get.device.errors))>0'
              name: 'Meraki: There are errors in ''Get device data'' metric'
              priority: WARNING
              tags:
                - tag: scope
                  value: availability
      discovery_rules:
        - uuid: 9c7e5d2ccad7416b8d58237be4218154
          name: 'Uplinks loss and quality discovery'
          type: DEPENDENT
          key: meraki.device.uplinks.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#IP}'
                value: '{$MERAKI.DEVICE.LOSS.LATENCY.IP.MATCHES}'
                formulaid: A
              - macro: '{#IP}'
                value: '{$MERAKI.DEVICE.LOSS.LATENCY.IP.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#UPLINK}'
                value: '{$MERAKI.DEVICE.UPLINK.MATCHES}'
                formulaid: C
              - macro: '{#UPLINK}'
                value: '{$MERAKI.DEVICE.UPLINK.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: D
          item_prototypes:
            - uuid: abf642b1bb944d16bebf90dcf58dbd86
              name: 'Uplink [{#IP}]: [{#UPLINK}]: Latency'
              type: DEPENDENT
              key: 'meraki.device.latency[{#IP},{#UPLINK}]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: s
              description: |
                Latency of the device uplink. 
                Network: {#NETWORK.ID}. 
                Device serial: {#SERIAL}.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.uplinksLL[?(@.ip == ''{#IP}'' && @.uplink== ''{#UPLINK}'')].timeSeries.[0].latencyMs.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '-1000'
                - type: MULTIPLIER
                  parameters:
                    - '0.001'
              master_item:
                key: meraki.get.device
              tags:
                - tag: component
                  value: network
                - tag: ip
                  value: '{#IP}'
                - tag: network
                  value: '{#NETWORK.ID}'
                - tag: serial-number
                  value: '{#SERIAL}'
                - tag: uplink
                  value: '{#UPLINK}'
              trigger_prototypes:
                - uuid: b559ad94b15848089d89e85e4d9db7ff
                  expression: 'min(/Cisco Meraki device by HTTP/meraki.device.latency[{#IP},{#UPLINK}],#3)>{$MERAKI.DEVICE.LATENCY}'
                  name: 'Uplink [{#IP}]: [{#UPLINK}]: latency > {$MERAKI.DEVICE.LATENCY}'
                  priority: WARNING
                  tags:
                    - tag: scope
                      value: performance
            - uuid: bded34f64113486ab0672210e5a8eb1d
              name: 'Uplink [{#IP}]: [{#UPLINK}]: Loss, %'
              type: DEPENDENT
              key: 'meraki.device.loss.pct[{#IP},{#UPLINK}]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '%'
              description: |
                Loss percent of the device uplink. 
                Network: {#NETWORK.ID}. 
                Device serial: {#SERIAL}.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.uplinksLL[?(@.ip == ''{#IP}'' && @.uplink== ''{#UPLINK}'')].timeSeries.[0].lossPercent.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '-1'
              master_item:
                key: meraki.get.device
              tags:
                - tag: component
                  value: network
                - tag: ip
                  value: '{#IP}'
                - tag: network
                  value: '{#NETWORK.ID}'
                - tag: serial-number
                  value: '{#SERIAL}'
                - tag: uplink
                  value: '{#UPLINK}'
              trigger_prototypes:
                - uuid: 1309e71025614ce4bb4242e6e291ae48
                  expression: 'min(/Cisco Meraki device by HTTP/meraki.device.loss.pct[{#IP},{#UPLINK}],#3)>{$MERAKI.DEVICE.LOSS}'
                  name: 'Uplink [{#IP}]: [{#UPLINK}]: loss > {$MERAKI.DEVICE.LOSS}%'
                  priority: WARNING
                  tags:
                    - tag: scope
                      value: performance
          graph_prototypes:
            - uuid: 4e9d84e08b32489c8c3a2cbbd4c6119a
              name: 'Uplink [{#IP}]: [{#UPLINK}]: Latency'
              ymin_type_1: FIXED
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Cisco Meraki device by HTTP'
                    key: 'meraki.device.latency[{#IP},{#UPLINK}]'
            - uuid: ebf262afc6d94d29b9831d418fb07edb
              name: 'Uplink [{#IP}]: [{#UPLINK}]: Loss'
              ymin_type_1: FIXED
              graph_items:
                - color: 199C0D
                  item:
                    host: 'Cisco Meraki device by HTTP'
                    key: 'meraki.device.loss.pct[{#IP},{#UPLINK}]'
          master_item:
            key: meraki.get.device
          lld_macro_paths:
            - lld_macro: '{#IP}'
              path: $.ip
            - lld_macro: '{#NETWORK.ID}'
              path: $.networkId
            - lld_macro: '{#SERIAL}'
              path: $.serial
            - lld_macro: '{#UPLINK}'
              path: $.uplink
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.uplinksLL
      tags:
        - tag: class
          value: network
        - tag: target
          value: cisco-meraki-dashboard
      macros:
        - macro: '{$MERAKI.API.URL}'
          value: api.meraki.com/api/v1
          description: 'Cisco Meraki dashboard API URL, e.g., api.meraki.com/api/v1'
        - macro: '{$MERAKI.DATA.TIMEOUT}'
          value: '60'
          description: 'Response timeout for an API.'
        - macro: '{$MERAKI.DEVICE.LATENCY}'
          value: '0.15'
          description: 'Devices uplink latency threshold, in seconds.'
        - macro: '{$MERAKI.DEVICE.LOSS}'
          value: '15'
          description: 'Devices uplink loss threshold, in percent.'
        - macro: '{$MERAKI.DEVICE.LOSS.LATENCY.IP.MATCHES}'
          value: '^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$'
          description: 'This macro is used in loss and latency checks discovery. Can be overridden on the host or linked template level.'
        - macro: '{$MERAKI.DEVICE.LOSS.LATENCY.IP.NOT_MATCHES}'
          value: ^null$
          description: 'This macro is used in loss and latency checks discovery. Can be overridden on the host or linked template level.'
        - macro: '{$MERAKI.DEVICE.UPLINK.MATCHES}'
          value: '.*'
          description: 'This macro is used in loss and latency checks discovery. Can be overridden on the host or linked template level.'
        - macro: '{$MERAKI.DEVICE.UPLINK.NOT_MATCHES}'
          value: ^null$
          description: 'This macro is used in loss and latency checks discovery. Can be overridden on the host or linked template level.'
        - macro: '{$MERAKI.GET.STATUS.INTERVAL}'
          value: '300'
          description: 'Update interval for get status item.'
        - macro: '{$MERAKI.HTTP_PROXY}'
          description: 'HTTP proxy for API requests. You can specify it using the format [protocol://][username[:password]@]proxy.example.com[:port]. See documentation at https://www.zabbix.com/documentation/6.0/manual/config/items/itemtypes/http'
        - macro: '{$MERAKI.TOKEN}'
          type: SECRET_TEXT
          description: 'Cisco Meraki dashboard API token.'
        - macro: '{$MERAKI.UPLINK.LL.TIMESPAN}'
          value: '180'
          description: 'Timespan in seconds for getting device uplinks loss and quality stats. Used in the metric configuration and in the JavaScript API query. Must be between 1 and 86400 seconds.'
      dashboards:
        - uuid: 76c4525eacc64f268572fefd76accc2f
          name: 'Meraki: General'
          pages:
            - name: 'Meraki: Uplinks'
              widgets:
                - type: GRAPH_PROTOTYPE
                  name: Loss
                  width: '12'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid
                      value:
                        host: 'Cisco Meraki device by HTTP'
                        name: 'Uplink [{#IP}]: [{#UPLINK}]: Loss'
                - type: GRAPH_PROTOTYPE
                  name: Latency
                  x: '12'
                  width: '12'
                  height: '5'
                  fields:
                    - type: INTEGER
                      name: columns
                      value: '1'
                    - type: GRAPH_PROTOTYPE
                      name: graphid
                      value:
                        host: 'Cisco Meraki device by HTTP'
                        name: 'Uplink [{#IP}]: [{#UPLINK}]: Latency'
      valuemaps:
        - uuid: 24967dff65a048578eae18b2485907cb
          name: 'Device status'
          mappings:
            - value: '0'
              newvalue: offline
            - value: '1'
              newvalue: online
            - value: '2'
              newvalue: dormant
            - value: '10'
              newvalue: unknown
